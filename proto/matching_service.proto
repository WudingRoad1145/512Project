syntax = "proto3";

package matching;

// Service definition for the matching engine
service MatchingService {
    // Submit a new order to the matching engine
    rpc SubmitOrder (OrderRequest) returns (SubmitOrderResponse) {}
    
    // Cancel an existing order
    rpc CancelOrder (CancelOrderRequest) returns (CancelOrderResponse) {}
    
    // Stream of order book updates for synchronization
    rpc SyncOrderBook (SyncRequest) returns (stream OrderBookUpdate) {}
    
    // Get current state of order book
    rpc GetOrderBook (GetOrderBookRequest) returns (OrderBook) {}

    // Stream of fill notifications
    rpc GetFills (FillRequest) returns (stream FillResponse) {}

    // Client Registration
    rpc RegisterClient (ClientRegistrationRequest) returns (ClientRegistrationResponse) {}
}

// Order message represents a new order request
message OrderRequest {
    string order_id = 1;
    string symbol = 2;
    string side = 3;  // BUY or SELL
    double price = 4;
    int64 quantity = 5;
    int64 remaining_quantity = 6;
    string client_id = 7;
    string engine_id = 8;
    int64 timestamp = 9;
}

// Response to order submission
message SubmitOrderResponse {
    string order_id = 1;
    string status = 2;
    string error_message = 3;
}

// Request for the establishment of a fill stream
message FillRequest {
    string client_id = 1;
    string engine_id = 2;
    int64 timeout = 3;
}
// FillResponse represents a matched trade
message FillResponse {
    string fill_id = 1;
    string order_id = 2;
    string symbol = 3;
    string side = 4; // BUY OR SELL
    double price = 5;
    int64 quantity = 6;
    int64 remaining_quantity = 7;
    int64 timestamp = 8;
    string buyer_id = 9;
    string seller_id = 10;
    string engine_id = 11;
}

// Request to cancel an order
message CancelOrderRequest {
    string order_id = 1;
    string client_id = 2;
}

// Response to cancel request
message CancelOrderResponse {
    string order_id = 1;
    string status = 2;
    string error_message = 3;
}

// Request to sync order book
message SyncRequest {
    string symbol = 1;
    string engine_id = 2;
}

// Order book update message for synchronization
message OrderBookUpdate {
    string symbol = 1;
    repeated PriceLevel bids = 2;
    repeated PriceLevel asks = 3;
    int64 sequence_number = 4;
    string engine_id = 5;
}

// Price level in order book
message PriceLevel {
    double price = 1;
    double quantity = 2;
    int32 order_count = 3;
}

// Request to get current order book state
message GetOrderBookRequest {
    string symbol = 1;
}

// Complete order book state
message OrderBook {
    string symbol = 1;
    repeated PriceLevel bids = 2;
    repeated PriceLevel asks = 3;
    int64 timestamp = 4;
}

// Client registration

message ClientRegistrationRequest {
    string client_id = 1;
    string client_authentication = 2;
    int64 client_x = 3;
    int64 client_y = 4;
}

message ClientRegistrationResponse {
    string status = 1;
    string match_engine_address = 2;
}
